import{_ as p,r as c,o,c as l,a as n,b as s,d as e,e as i,f as t}from"./app-706704df.js";const u="/ros2-development/assets/Nodes-TopicandService-7208a196.gif",r="/ros2-development/assets/Topic-SinglePublisherandSingleSubscriber-c6807a8b.gif",d="/ros2-development/assets/Topic-MultiplePublisherandMultipleSubscriber-0202230c.gif",k={},v=n("h1",{id:"ros2-development",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ros2-development","aria-hidden":"true"},"#"),s(" ROS2 Development")],-1),m={href:"https://github.com/ros2/ros2/releases",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>Documentation is at https://docs.ros.org</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>推荐 apt 安装，docker 安装也可以，但是 docker 默认不支持图形界面</p><h3 id="apt-安装" tabindex="-1"><a class="header-anchor" href="#apt-安装" aria-hidden="true">#</a> apt 安装</h3><ol><li>首先确保环境支持UTF-8</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>locale  <span class="token comment"># 检查系统是否安装有UTF-8</span>
<span class="token comment"># 如果没有则进行安装</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> locales
<span class="token function">sudo</span> locale-gen en_US en_US.UTF-8
<span class="token function">sudo</span> update-locale <span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>en_US.UTF-8 <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8
locale  <span class="token comment"># 安装好后再次检查</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>设置源</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加apt仓库</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span> gnupg2 lsb-release
<span class="token function">curl</span> http://repo.ros2.org/repos.key <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -
<span class="token function">sudo</span> <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;echo &quot;deb http://packages.ros.org/ros2/ubuntu \`lsb_release -cs\` main&quot; &gt; /etc/apt/sources.list.d/ros2-latest.list&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>安装package 设置软件源</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;echo &quot;deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu bionic main&quot; &gt; /etc/apt/sources.list.d/ros2-latest.list&#39;</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-foxy-desktop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>运行实例</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打开一个终端并配置环境</span>
<span class="token builtin class-name">source</span> /opt/ros/foxy/setup.bash
<span class="token comment"># 运行C++ talker</span>
ros2 run demo_nodes_cpp talker

<span class="token comment"># 然后打开另外一个终端并配置环境</span>
<span class="token builtin class-name">source</span> /opt/ros/foxy/setup.bash
<span class="token comment"># 运行C++ listener</span>
ros2 run demo_nodes_py listener
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要提前安装 <code>rosdep</code> 和 <code>colcon</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> python3-colcon-common-extensions
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-rosdep2
<span class="token function">sudo</span> rosdep init <span class="token comment"># 需要🪜 </span>
rosdep update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装 <code>rosdep</code> 时，如果出现网络错误，<code>/etc/hosts</code> ，添加 ip 映射</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>185.199.110.133 raw.githubusercontent.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>网不好，编辑 <code>/etc/ros/rosdep/sources.list.d/20-default.list</code> 文件，添加如下内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># os-specific listings first</span>
yaml hhttps://mirrors.tuna.tsinghua.edu.cn/github-raw/ros/rosdistro/master/rosdep/osx-homebrew.yaml osx

<span class="token comment"># generic</span>
yaml hhttps://mirrors.tuna.tsinghua.edu.cn/github-raw/ros/rosdistro/master/rosdep/base.yaml
yaml hhttps://mirrors.tuna.tsinghua.edu.cn/github-raw/ros/rosdistro/master/rosdep/python.yaml
yaml hhttps://mirrors.tuna.tsinghua.edu.cn/github-raw/ros/rosdistro/master/rosdep/ruby.yaml
gbpdistro hhttps://mirrors.tuna.tsinghua.edu.cn/github-raw/ros/rosdistro/master/releases/fuerte.yaml fuerte

<span class="token comment"># newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装 python 依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip3 uninstall empy <span class="token parameter variable">-y</span>
pip3 <span class="token function">install</span> empy lark numpy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-安装" tabindex="-1"><a class="header-anchor" href="#docker-安装" aria-hidden="true">#</a> docker 安装</h3><p>通过 docker 安装，首先安装 docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> docker.io
systemctl start <span class="token function">docker</span>  <span class="token comment"># 安装完成后启动docker</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> <span class="token comment"># 设置开机启动</span>
<span class="token function">docker</span> version          <span class="token comment"># 查看docker版本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是非 root 用户，需要将用户加入 docker 用户组</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span>
<span class="token function">sudo</span> gpasswd <span class="token parameter variable">-a</span> <span class="token variable">\${<span class="token environment constant">USER</span>}</span> <span class="token function">docker</span>
<span class="token function">groups</span> <span class="token environment constant">$USER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过配置 <code>/etc/docker/daemon.json</code> 文件来配置 docker 镜像加速</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://registry.docker-cn.com&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，执行 <code>sudo systemctl restart docker</code> ​重启守护进程。</p>`,28),g={href:"https://hub.docker.com/_/ros/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/osrf/docker_images",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"Dockerfile.ros-desktop.foxy.jammy",-1),f=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> docker/containers/Dockerfile.ros-desktop.foxy.jammy <span class="token parameter variable">-t</span> ros2:v1 <span class="token builtin class-name">.</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> ros2:v1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行ROS小海龟</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ros2 run turtlesim turtlesim_node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是由于 docker 默认不支持图形界面，所以需要配置一下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> x11-xserver-utils
xhost + <span class="token comment"># 每次开机都要运行</span>
<span class="token comment">#输出为：access control disabled, clients can connect from any host</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新启动一个容器，运行如下命令， <code>-d</code> 后台运行，<code>-it</code> 交互式运行，<code>-v</code> 挂载目录，<code>-e</code> 设置环境变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime:ro <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> /tmp/.X11-unix:/tmp/.X11-unix <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable"><span class="token environment constant">DISPLAY</span></span><span class="token operator">=</span>unix<span class="token environment constant">$DISPLAY</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> GDK_SCALE <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> GDK_DPI_SCALE <span class="token punctuation">\\</span>
    ros2:v1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-jetson-nano-上安装-ros2" tabindex="-1"><a class="header-anchor" href="#在-jetson-nano-上安装-ros2" aria-hidden="true">#</a> 在 Jetson Nano 上安装 ROS2</h3>`,8),y={href:"https://github.com/dusty-nv/ros_deep_learning",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"dusty-nv/ros_deep_learning",-1),w=t(`<p>将用户加入 docker 用户组</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gpasswd <span class="token parameter variable">-a</span> <span class="token variable">\${<span class="token environment constant">USER</span>}</span> <span class="token function">docker</span>
<span class="token function">groups</span> <span class="token environment constant">$USER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过配置 <code>/etc/docker/daemon.json</code> 文件来配置 docker 镜像加速</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://registry.docker-cn.com&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，执行 <code>sudo systemctl restart docker</code> ​重启守护进程。</p>`,5),q={href:"http://dev.ros2.fishros.com/doc/Releases.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/dusty-nv/jetson-containers",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"dusty-nv/jetson-containers",-1),C=n("code",null,"docker/tag.sh",-1),O=n("code",null,"CONTAINER_IMAGE",-1),T=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> docker/run-nano.sh <span class="token comment"># 默认 --ros humble, -y 跳过确认</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入容器后，运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ros2 launch <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>launch_file<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>launch_arguments<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="vscode-插件" tabindex="-1"><a class="header-anchor" href="#vscode-插件" aria-hidden="true">#</a> VSCode 插件</h3>`,4),N={href:"https://marketplace.visualstudio.com/items?itemName=ms-iot.vscode-ros",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"ctrl/cmd + shift + p ",-1),A=n("ul",null,[n("li",null,[n("code",null,"ROS: Update C++ Properties"),s(": 自动更新 "),n("code",null,".vscode/c_cpp_properties.json"),s(" 中 C++ 配置，头文件目录等")]),n("li",null,[n("code",null,"ROS: Update Python Path"),s(": 自动更新 "),n("code",null,".vscode/settings.json"),s(" 中 Python 包路径")])],-1),P=n("h2",{id:"ros2-基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ros2-基础","aria-hidden":"true"},"#"),s(" ROS2 基础")],-1),I={href:"http://dev.ros2.fishros.com",target:"_blank",rel:"noopener noreferrer"},D=t('<h3 id="ros2-节点" tabindex="-1"><a class="header-anchor" href="#ros2-节点" aria-hidden="true">#</a> ROS2 节点</h3><p>ROS 图是 ROS2 元素同时处理数据的网络。它包含所有可执行文件以及它们之间的连接 (如果要将它们全部映射并可视化)。</p><p>ROS 中的每个节点应负责单个模块目的 (例如，一个用于控制车轮电机的节点，一个用于控制激光测距仪的节点等)。每个节点可以通过话题、服务、动作或参数向其他节点发送和接收数据。</p><p>一个完整的机器人系统由许多协同工作的节点组成。在 ROS2 中，单个可执行文件 (cprogram程序、Python程序等) 可以包含一个或多个节点。</p><p><img src="'+u+`" alt="ROS2"></p><p>ROS2 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ros2 run <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>executable_name<span class="token operator">&gt;</span>
ros2 run turtlesim turtlesim_node <span class="token comment"># 启动小海龟</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，我们仍然不知道节点名称。您可以使用 <code>ros2 node list</code> 找到节点名称</p><p>当 turtlesim 仍在另一个终端中运行时，打开一个新终端，然后输入以下命令，可以看到输出 <code>/turtlesim</code> ，这是 turtlesim 节点的名称</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ros2 <span class="token function">node</span> list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再打开一个终端启动另一个节点 <code>ros2 run turtlesim turtle_teleop_key</code> ，然后再次运行 <code>ros2 node list</code> ，可以看到输出 <code>turtlesim_node</code> 和 <code>/teleop_turtle</code></p><p>访问结点信息，可以看到节点的名称、类型、发布的话题、订阅的话题、提供的服务、使用的服务、使用的参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ros2 <span class="token function">node</span> info /turtlesim
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ros2-话题" tabindex="-1"><a class="header-anchor" href="#ros2-话题" aria-hidden="true">#</a> ROS2 话题</h3><p>ROS2 将复杂的系统分解成许多模块化节点，<strong>话题 (Topic)</strong> 是 ROS2 中最常用的通信机制，它充当节点交换消息的总线，是一种<strong>发布/订阅机制</strong>。话题是数据在节点之间移动，从而在系统的不同部分之间移动的主要方式之一。</p><p>节点可以将数据发布到任意数量的话题，同时订阅任意数量的话题。</p><p><img src="`+r+'" alt="Topic-SPSS"><img src="'+d+`" alt="Topic-MPMS"></p><p>在新终端中运行 <code>ros2 topic list</code> 命令将返回系统中当前活动的所有话题的列表:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/parameter_events
/rosout
/turtle1/cmd_vel
/turtle1/color_sensor
/turtle1/pose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ros2 topic list -t</code> 返回相同的话题列表，这次在括号中附加了话题类型</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/parameter_events <span class="token punctuation">[</span>rcl_interfaces/msg/ParameterEvent<span class="token punctuation">]</span>
/rosout <span class="token punctuation">[</span>rcl_interfaces/msg/Log<span class="token punctuation">]</span>
/turtle1/cmd_vel <span class="token punctuation">[</span>geometry_msgs/msg/Twist<span class="token punctuation">]</span>
/turtle1/color_sensor <span class="token punctuation">[</span>turtlesim/msg/Color<span class="token punctuation">]</span>
/turtle1/pose <span class="token punctuation">[</span>turtlesim/msg/Pose<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ros2-服务" tabindex="-1"><a class="header-anchor" href="#ros2-服务" aria-hidden="true">#</a> ROS2 服务</h3><p>服务是 ROS 图中节点的另一种通讯方法。服务基于调用和响应模型，而不是话题的发布者-订阅者模型。而话题允许节点订阅数据流得到不断更新，服务对具体调用的客户端提供数据。</p><p>还是现在两个终端分别运行 <code>ros2 run turtlesim turtlesim_node</code> <code>ros2 run turtlesim turtle_teleop_key</code></p><h4 id="服务列表" tabindex="-1"><a class="header-anchor" href="#服务列表" aria-hidden="true">#</a> 服务列表</h4><p>在新终端中运行 ros2 service list 命令将返回系统中当前活动的所有服务的列表: [待校准@8188]</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/clear
/kill
/reset
/spawn
/teleop_turtle/describe_parameters
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>你将会看到两个节点都有相同的六个服务，它们的名字中有 <code>parameters</code> 。几乎 ROS 2 中的每个节点都有这些构建参数的基础设施服务。</p></blockquote><p>可以看到 turtlesim特定服务， <code>/clear</code>, <code>/kill</code>, <code>/reset</code>, <code> spawn</code>, <code>/turtle1/set_pen</code>, <code>/turtle1/teleport_absolute</code>, <code>/turtle1/teleport_relative</code></p><h3 id="ros2-参数" tabindex="-1"><a class="header-anchor" href="#ros2-参数" aria-hidden="true">#</a> ROS2 参数</h3><h3 id="ros2-动作" tabindex="-1"><a class="header-anchor" href="#ros2-动作" aria-hidden="true">#</a> ROS2 动作</h3><h2 id="创建-ros-包" tabindex="-1"><a class="header-anchor" href="#创建-ros-包" aria-hidden="true">#</a> 创建 ROS 包</h2><p>包可以被视为 ROS2 代码的容器。如果你想安装你的代码或者与其他人共享，那么你需要把它组织成一个包。</p><p>使用 CMake 或 Python 创建一个新包，并运行其可执行文件。</p><p>ROS2 中的包创建使用 ament 作为其构建系统，colcon 作为其构建工具。您可以使用官方支持的 CMake 或 Python 创建包，尽管确实存在其他构建类型。</p><p>工作区中包的结构如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>workspace_folder <span class="token comment"># 这里指目录下 ros</span>
├── src
│   ├── package_1 <span class="token comment"># 基于 CMake 的包</span>
│   │   ├── CMakeLists.txt
│   │   └── package.xml
│   ├── package_2 <span class="token comment"># 基于 Python 的包</span>
│   │   ├── setup.py
│   │   ├── package.xml
│   │   ├── package_2
│   │   │   ├── __init__.py
│   │   │   ├── publisher_member_function.py
│   │   │   └── <span class="token punctuation">..</span>.
│   │   └── resource/package_2
│   └── <span class="token punctuation">..</span>.
└── <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来需要创建包，构建类型有 <code>cmake</code>, <code>ament_cmake</code>, <code>ament_python</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src
ros2 pkg create --build-type ament_python  <span class="token operator">&lt;</span>pack_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写发布和订阅包-python" tabindex="-1"><a class="header-anchor" href="#编写发布和订阅包-python" aria-hidden="true">#</a> 编写发布和订阅包 (Python)</h3><p>创建名为 <code>py_pubsub</code> 的包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src
ros2 pkg create --build-type ament_python py_pubsub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>得到如下内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>package_2 <span class="token comment"># 基于 Python 的包</span>
├── setup.py
├── package.xml
└── package_2
    ├── __init__.py
    ├── publisher_member_function.py    <span class="token comment"># 创建该文件，发布者</span>
    ├── subscriber_member_function.py   <span class="token comment"># 创建该文件，订阅者</span>
    └── <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),L=t(`<p>在构建之前，在工作区的<strong>根目录</strong>下运行 rosdep ，以检查是否缺少依赖项:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rosdep <span class="token function">install</span> <span class="token parameter variable">-i</span> --from-path src <span class="token parameter variable">--rosdistro</span> foxy <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>仍然在你的工作空间的根，建立你的新的包:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>colcon build --packages-select py_pubsub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两个终端分别激活环境并且运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span> install/setup.bash
ros2 run py_pubsub talker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span> install/setup.bash
ros2 run py_pubsub listener
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写发布和订阅包-c" tabindex="-1"><a class="header-anchor" href="#编写发布和订阅包-c" aria-hidden="true">#</a> 编写发布和订阅包 (C++)</h3><p>创建名为 <code>cpp_pubsub</code> 的包，使用 <code>ament_cmake</code> 构建类型</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src
ros2 pkg create --build-type ament_cmake cpp_pubsub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在包 <code>cpp_pubsub</code> 目录下添加 <code>src/publisher_member_function.cpp</code> 和 <code>src/subscriber_member_function.cpp</code> 文件，以及 <code>CMakeLists.txt</code> 文件，添加包依赖</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">find_package</span><span class="token punctuation">(</span>rclcpp REQUIRED<span class="token punctuation">)</span>   <span class="token comment"># 添加依赖</span>
<span class="token keyword">find_package</span><span class="token punctuation">(</span>std_msgs REQUIRED<span class="token punctuation">)</span> <span class="token comment"># 添加依赖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>ament_package()</code> 之前添加编译节点可执行文件</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># [Node] talker : 编译 链接ROS 安装</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>talker <span class="token comment"># 可执行文件名，也就是节点(运行的文件)名</span>
  src/publisher_member_function.cpp <span class="token comment"># 源文件</span>
<span class="token punctuation">)</span>
<span class="token comment"># target_link_libraries(video_reader \${OpenCV_LIBRARIES}) # 如果有</span>
<span class="token function">ament_target_dependencies</span><span class="token punctuation">(</span>talker
  rclcpp    <span class="token comment"># 添加 ROS 包: rclcpp</span>
  std_msgs  <span class="token comment"># 添加 ROS 包: std_msgs</span>
<span class="token punctuation">)</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS     talker              <span class="token comment"># 安装的可执行文件</span>
        DESTINATION lib/<span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> <span class="token comment"># 安装的位置</span>
<span class="token punctuation">)</span>

<span class="token comment"># [Node] listener : 编译 链接ROS 安装</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>listener src/subscriber_member_function.cpp<span class="token punctuation">)</span>
<span class="token function">ament_target_dependencies</span><span class="token punctuation">(</span>listener rclcpp std_msgs<span class="token punctuation">)</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS listener DESTINATION lib/<span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>colcon build --packages-select cpp_pubsub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两个终端分别激活环境并且运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span> install/setup.bash
ros2 run cpp_pubsub talker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span> install/setup.bash
ros2 run cpp_pubsub listener
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写服务和客户端包-python" tabindex="-1"><a class="header-anchor" href="#编写服务和客户端包-python" aria-hidden="true">#</a> 编写服务和客户端包 (Python)</h3><p>创建名为 <code>py_srvcli</code> 的包，并且添加依赖 <code>rclpy</code> 和 <code>example_interfaces</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src
ros2 pkg create py_srvcli <span class="token punctuation">\\</span>
    --build-type ament_python <span class="token punctuation">\\</span>
    <span class="token parameter variable">--dependencies</span> rclpy example_interfaces
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在创建时，添加包的相关信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src
ros2 pkg create py_srvcli <span class="token punctuation">\\</span>
    --build-type ament_python <span class="token punctuation">\\</span>
    <span class="token parameter variable">--dependencies</span> rclpy example_interfaces <span class="token punctuation">\\</span>
    <span class="token parameter variable">--description</span> py_srvcli <span class="token punctuation">\\</span>
    --maintainer-email <span class="token string">&quot;example_email@gmail.com&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--license</span> <span class="token string">&quot;Apache License 2.0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>src/py_srvcli/py_srvcli</code> 目录下创建服务端文件 <a href="../src/py_srvcli/py_srvcli/service_member_function.py"><code>service_member_function.py</code></a> 和客户端文件 <code>client_member_function.py</code></p><p>然后在 <code>src/py_srvcli/setup.py</code> 中添加入口起点</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>entry_points<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&#39;console_scripts&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span>
      <span class="token string">&#39;service = py_srvcli.service_member_function:main&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;client = py_srvcli.client_member_function:main&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在根目录下构建 <code>py_srvcli</code> 包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>colcon build --packages-select py_srvcli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两个终端分别激活环境并且运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span> install/setup.bash
ros2 run py_srvcli <span class="token function">service</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span> install/setup.bash
ros2 run py_srvcli client <span class="token number">2</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写服务和客户端包-c" tabindex="-1"><a class="header-anchor" href="#编写服务和客户端包-c" aria-hidden="true">#</a> 编写服务和客户端包 (C++)</h3><p>使用 C++ 创建和运行<strong>服务</strong>和<strong>客户端</strong>节点。当 <code>nodes</code> 使用 <code>services</code> 进行通信时，<strong>发送数据请求的节点</strong>被调用到<strong>客户端节点</strong>，<strong>响应请求的节点</strong>是<strong>服务节</strong>点。请求和响应的结构由 <code>.srv</code> 文件决定。</p><p>创建新包 <code>custom_interfaces</code>，使用 <code>ament_cmake</code> 构建类型</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src
ros2 pkg create --build-type ament_cmake cpp_srvcli <span class="token punctuation">\\</span>
    <span class="token parameter variable">--dependencies</span> rclcpp custom_interfaces
<span class="token comment"># 依赖于刚才使用过的 custom_interfaces 包    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>custom_interfaces</code> 包内包含 <code>AddTwoInts.srv</code> 文件，前两行是请求的参数，破折号下面是响应。</p><div class="language-srv line-numbers-mode" data-ext="srv"><pre class="language-srv"><code>int64 a
int64 b
---
int64 sum
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>cpp_srvcli</code> 包内，创建 <code>src/add_two_ints_server.cpp</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;rclcpp/rclcpp.hpp&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;custom_interfaces/srv/add_two_ints.hpp&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>custom_interfaces<span class="token double-colon punctuation">::</span>srv<span class="token double-colon punctuation">::</span>AddTwoInts<span class="token double-colon punctuation">::</span>Request<span class="token operator">&gt;</span> request<span class="token punctuation">,</span>
         std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>custom_interfaces<span class="token double-colon punctuation">::</span>srv<span class="token double-colon punctuation">::</span>AddTwoInts<span class="token double-colon punctuation">::</span>Response<span class="token operator">&gt;</span> response<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    response<span class="token operator">-&gt;</span>sum <span class="token operator">=</span> request<span class="token operator">-&gt;</span>a <span class="token operator">+</span> request<span class="token operator">-&gt;</span>b<span class="token punctuation">;</span>
    <span class="token function">RCLCPP_INFO</span><span class="token punctuation">(</span>rclcpp<span class="token double-colon punctuation">::</span><span class="token function">get_logger</span><span class="token punctuation">(</span><span class="token string">&quot;rclcpp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Incoming request\\na: %ld b: %ld&quot;</span><span class="token punctuation">,</span> request<span class="token operator">-&gt;</span>a<span class="token punctuation">,</span> request<span class="token operator">-&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RCLCPP_INFO</span><span class="token punctuation">(</span>rclcpp<span class="token double-colon punctuation">::</span><span class="token function">get_logger</span><span class="token punctuation">(</span><span class="token string">&quot;rclcpp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;sending back response: [%ld]&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span>response<span class="token operator">-&gt;</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    rclcpp<span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化ROS2 c client客户端库</span>

    <span class="token comment">// 创建一个名为 add_two_ints_server 的节点</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>rclcpp<span class="token double-colon punctuation">::</span>Node<span class="token operator">&gt;</span> node <span class="token operator">=</span> rclcpp<span class="token double-colon punctuation">::</span><span class="token class-name">Node</span><span class="token double-colon punctuation">::</span><span class="token function">make_shared</span><span class="token punctuation">(</span><span class="token string">&quot;add_two_ints_server&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 为该节点创建名为 add_two_ints 的服务，并自动调用y使用 “&amp; add” 方法在网络上发布该服务</span>
    rclcpp<span class="token double-colon punctuation">::</span>Service<span class="token operator">&lt;</span>custom_interfaces<span class="token double-colon punctuation">::</span>srv<span class="token double-colon punctuation">::</span>AddTwoInts<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>SharedPtr service <span class="token operator">=</span>
        node<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">create_service</span><span class="token generic class-name"><span class="token operator">&lt;</span>custom_interfaces<span class="token double-colon punctuation">::</span>srv<span class="token double-colon punctuation">::</span>AddTwoInts<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;add_two_ints&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">RCLCPP_INFO</span><span class="token punctuation">(</span>rclcpp<span class="token double-colon punctuation">::</span><span class="token function">get_logger</span><span class="token punctuation">(</span><span class="token string">&quot;rclcpp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Ready to add two ints.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rclcpp<span class="token double-colon punctuation">::</span><span class="token function">spin</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 旋转节点，使服务可用</span>
    rclcpp<span class="token double-colon punctuation">::</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编辑客户端节源码 <code>add_two_ints_client.cpp</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;rclcpp/rclcpp.hpp&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;custom_interfaces/srv/add_two_ints.hpp&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>chrono_literals<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    rclcpp<span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">RCLCPP_INFO</span><span class="token punctuation">(</span>rclcpp<span class="token double-colon punctuation">::</span><span class="token function">get_logger</span><span class="token punctuation">(</span><span class="token string">&quot;rclcpp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;usage: add_two_ints_client X Y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 与服务节点类似，以下代码行创建节点，然后为该节点创建客户端:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>rclcpp<span class="token double-colon punctuation">::</span>Node<span class="token operator">&gt;</span> node <span class="token operator">=</span> rclcpp<span class="token double-colon punctuation">::</span><span class="token class-name">Node</span><span class="token double-colon punctuation">::</span><span class="token function">make_shared</span><span class="token punctuation">(</span><span class="token string">&quot;add_two_ints_client&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rclcpp<span class="token double-colon punctuation">::</span>Client<span class="token operator">&lt;</span>custom_interfaces<span class="token double-colon punctuation">::</span>srv<span class="token double-colon punctuation">::</span>AddTwoInts<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>SharedPtr client <span class="token operator">=</span>
        node<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">create_client</span><span class="token generic class-name"><span class="token operator">&lt;</span>custom_interfaces<span class="token double-colon punctuation">::</span>srv<span class="token double-colon punctuation">::</span>AddTwoInts<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;add_two_ints&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 接下来，创建请求。它的结构是由前面提到的 .srv 文件定义的。</span>
    <span class="token keyword">auto</span> request <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>custom_interfaces<span class="token double-colon punctuation">::</span>srv<span class="token double-colon punctuation">::</span>AddTwoInts<span class="token double-colon punctuation">::</span>Request<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token operator">-&gt;</span>a <span class="token operator">=</span> <span class="token function">atoll</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token operator">-&gt;</span>b <span class="token operator">=</span> <span class="token function">atoll</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// while 循环给客户端1秒钟搜索网络中的服务节点。如果找不到，它将继续等待。</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>client<span class="token operator">-&gt;</span><span class="token function">wait_for_service</span><span class="token punctuation">(</span><span class="token number">1</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 如果客户端被取消 (例如，通过您在终端中输入 “ctrl + c”)，它将返回一条错误日志消息，说明它被中断了。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rclcpp<span class="token double-colon punctuation">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">RCLCPP_ERROR</span><span class="token punctuation">(</span>rclcpp<span class="token double-colon punctuation">::</span><span class="token function">get_logger</span><span class="token punctuation">(</span><span class="token string">&quot;rclcpp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Interrupted while waiting for the service. Exiting.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">RCLCPP_INFO</span><span class="token punctuation">(</span>rclcpp<span class="token double-colon punctuation">::</span><span class="token function">get_logger</span><span class="token punctuation">(</span><span class="token string">&quot;rclcpp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;service not available, waiting again...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 然后，客户端发送其请求，节点旋转直到收到响应或失败。</span>

    <span class="token keyword">auto</span> result <span class="token operator">=</span> client<span class="token operator">-&gt;</span><span class="token function">async_send_request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Wait for the result.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rclcpp<span class="token double-colon punctuation">::</span><span class="token function">spin_until_future_complete</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">==</span> rclcpp<span class="token double-colon punctuation">::</span>FutureReturnCode<span class="token double-colon punctuation">::</span>SUCCESS<span class="token punctuation">)</span>
        <span class="token function">RCLCPP_INFO</span><span class="token punctuation">(</span>rclcpp<span class="token double-colon punctuation">::</span><span class="token function">get_logger</span><span class="token punctuation">(</span><span class="token string">&quot;rclcpp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Sum: %ld&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">RCLCPP_ERROR</span><span class="token punctuation">(</span>rclcpp<span class="token double-colon punctuation">::</span><span class="token function">get_logger</span><span class="token punctuation">(</span><span class="token string">&quot;rclcpp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Failed to call service add_two_ints&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rclcpp<span class="token double-colon punctuation">::</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编辑 <code>CMakeLists.txt</code> ，</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.5</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>cpp_srvcli<span class="token punctuation">)</span>

<span class="token comment"># Default to C99</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">NOT</span> <span class="token variable">CMAKE_C_STANDARD</span><span class="token punctuation">)</span>
  <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_STANDARD</span> <span class="token number">99</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Default to C++14</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">NOT</span> <span class="token variable">CMAKE_CXX_STANDARD</span><span class="token punctuation">)</span>
  <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">14</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_COMPILER_IS_GNUCXX</span> <span class="token operator">OR</span> <span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> <span class="token string">&quot;Clang&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">add_compile_options</span><span class="token punctuation">(</span>-Wall -Wextra -Wpedantic<span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># find dependencies</span>
<span class="token keyword">find_package</span><span class="token punctuation">(</span>ament_cmake REQUIRED<span class="token punctuation">)</span>
<span class="token keyword">find_package</span><span class="token punctuation">(</span>rclcpp REQUIRED<span class="token punctuation">)</span>
<span class="token keyword">find_package</span><span class="token punctuation">(</span>custom_interfaces REQUIRED<span class="token punctuation">)</span>

<span class="token comment"># [Node] server : 编译、链接、安装</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>server src/add_two_ints_server.cpp<span class="token punctuation">)</span>
<span class="token function">ament_target_dependencies</span><span class="token punctuation">(</span>server rclcpp custom_interfaces<span class="token punctuation">)</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS server DESTINATION lib/<span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># [Node] client : 编译、链接、安装</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>client src/add_two_ints_client.cpp<span class="token punctuation">)</span>
<span class="token function">ament_target_dependencies</span><span class="token punctuation">(</span>client rclcpp custom_interfaces<span class="token punctuation">)</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS client DESTINATION lib/<span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">ament_package</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>colcon build --packages-select cpp_srvcli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行服务节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> install/setup.bash
ros2 run cpp_srvcli server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个终端，运行客户端节点，给两个数作为参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> install/setup.bash
ros2 run cpp_srvcli client <span class="token number">2</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义接口-msg-srv" tabindex="-1"><a class="header-anchor" href="#自定义接口-msg-srv" aria-hidden="true">#</a> 自定义接口 msg srv</h3><p>自定义接口文件 ( <code>.msg</code> 和 <code>.srv</code> )，并将其与 Python 和 C++ 节点一起使用</p><p>创建新包 <code>custom_interfaces</code>，使用 <code>ament_cmake</code> 构建类型</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src
ros2 pkg create --build-type ament_cmake custom_interfaces
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>custom_interfaces</code> 目录 (和包同级目录) 下创建 <code>msg</code> 和 <code>srv</code> 文件夹，创建 <code>msg/Num.msg</code> 和 <code>srv/AddTwoInts.srv</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> custom_interfaces
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> msg <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> srv
<span class="token function">touch</span> msg/Num.msg <span class="token operator">&amp;&amp;</span> <span class="token function">touch</span> srv/AddTwoInts.srv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Num.msg</code> 中声明其数据结构。这是自定义消息，用于传输 <code>num</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>int64 num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>AddTwoInts.srv</code> 中声明其数据结构。这是自定义服务，用于传输 <code>a</code> 和 <code>b</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>int64 a
int64 b
---
int64 <span class="token function">sum</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>CMakeLists.txt</code> 中添加如下内容</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">find_package</span><span class="token punctuation">(</span>rosidl_default_generators REQUIRED<span class="token punctuation">)</span>
<span class="token function">rosidl_generate_interfaces</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>
  <span class="token string">&quot;srv/AddTwoInts.srv&quot;</span>
  <span class="token string">&quot;msg/Num.msg&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为接口依赖于 <code>rosidl_default_generators</code> 来生成特定于语言的代码，所以您需要声明对它的依赖，在 <code>package.xml</code> 中添加如下内容。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build_depend</span><span class="token punctuation">&gt;</span></span>rosidl_default_generators<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build_depend</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exec_depend</span><span class="token punctuation">&gt;</span></span>rosidl_default_runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exec_depend</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>member_of_group</span><span class="token punctuation">&gt;</span></span>rosidl_interface_packages<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>member_of_group</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建 <code>custom_interfaces</code> 包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>colcon build --packages-select custom_interfaces
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，现在这些接口将被其他 ROS2 包发现并使用</p><p>通过使用 <code>ros2 interface show </code>命令确认您的接口创建有效</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span> install/setup.bash
ros2 interface show custom_interfaces/msg/Num
ros2 interface show custom_interfaces/srv/AddTwoInts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 <code>py_pubsub</code> 包，添加依赖 <code>custom_interfaces</code>，并且修改 <code>publisher_member_function.py</code> 和 <code>subscriber_member_function.py</code> 文件，以及 <code>setup.py</code> 文件</p><h3 id="自定义参数-python" tabindex="-1"><a class="header-anchor" href="#自定义参数-python" aria-hidden="true">#</a> 自定义参数 (Python)</h3><p>使用 Python (rclpy) 创建并运行具有ROS参数的类。当你制作自己的 nodes 时，你有时需要添加可以从launch文件中设置的参数。</p><h3 id="自定义参数-c" tabindex="-1"><a class="header-anchor" href="#自定义参数-c" aria-hidden="true">#</a> 自定义参数 (C++)</h3><p>创建并运行具有 ROS 参数的类。有时节点在运行前需要从 launch 文件中设置的参数。</p><p>创建包 <code>cpp_parameters</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src
ros2 pkg create --build-type ament_cmake cpp_parameters <span class="token parameter variable">--dependencies</span> rclcpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在包目录 <code>src/cpp_parameters</code> 下创建 <code>src/cpp_parameters_node.cpp</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;rclcpp/rclcpp.hpp&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>chrono_literals<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ParametersClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> rclcpp<span class="token double-colon punctuation">::</span><span class="token class-name">Node</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>string parameter_string_<span class="token punctuation">;</span>
    rclcpp<span class="token double-colon punctuation">::</span>TimerBase<span class="token double-colon punctuation">::</span>SharedPtr timer_<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ParametersClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">&quot;parameter_node&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 创建我们的参数。我们的参数名为 my_parameter ，并被指定为默认值 world</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">declare_parameter</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;my_parameter&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// timer_ 初始化，这导致 respond 函数每秒执行一次</span>
        timer_ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">create_wall_timer</span><span class="token punctuation">(</span><span class="token number">1000</span>ms<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ParametersClass<span class="token double-colon punctuation">::</span>respond<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// respond 函数的第一行从节点获取参数 my_parameter ，并将其存储在 parameter_string_ 中</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">get_parameter</span><span class="token punctuation">(</span><span class="token string">&quot;my_parameter&quot;</span><span class="token punctuation">,</span> parameter_string_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RCLCPP_INFO</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">get_logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello %s&quot;</span><span class="token punctuation">,</span> parameter_string_<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    rclcpp<span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rclcpp<span class="token double-colon punctuation">::</span><span class="token function">spin</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>ParametersClass<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// “rclcpp:: spin” 开始处理来自节点的数据。</span>
    rclcpp<span class="token double-colon punctuation">::</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CMakeLists.txt</code> 文件</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_executable</span><span class="token punctuation">(</span>parameter_node src/cpp_parameters_node.cpp<span class="token punctuation">)</span>
<span class="token function">ament_target_dependencies</span><span class="token punctuation">(</span>parameter_node rclcpp<span class="token punctuation">)</span>

<span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS
  parameter_node
  DESTINATION lib/<span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>colcon build --packages-select cpp_parameters
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> install/setup.bash
ros2 run cpp_parameters parameter_node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个终端，运行节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> install/setup.bash
<span class="token comment"># 查看参数</span>
ros2 param list
<span class="token comment"># 修改参数</span>
ros2 param <span class="token builtin class-name">set</span> /parameter_node my_parameter earth
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过 launch 文件修改，在包目录 <code>cpp_parameters</code> 下创建 <code>launch/cpp_parameters_launch.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> launch <span class="token keyword">import</span> LaunchDescription
<span class="token keyword">from</span> launch_ros<span class="token punctuation">.</span>actions <span class="token keyword">import</span> Node

<span class="token keyword">def</span> <span class="token function">generate_launch_description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> LaunchDescription<span class="token punctuation">(</span><span class="token punctuation">[</span>
        Node<span class="token punctuation">(</span>
            package<span class="token operator">=</span><span class="token string">&quot;cpp_parameters&quot;</span><span class="token punctuation">,</span>
            executable<span class="token operator">=</span><span class="token string">&quot;parameter_node&quot;</span><span class="token punctuation">,</span>
            name<span class="token operator">=</span><span class="token string">&quot;custom_parameter_node&quot;</span><span class="token punctuation">,</span>
            output<span class="token operator">=</span><span class="token string">&quot;screen&quot;</span><span class="token punctuation">,</span>
            emulate_tty<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
            parameters<span class="token operator">=</span><span class="token punctuation">[</span>
                <span class="token punctuation">{</span><span class="token string">&quot;my_parameter&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;earth&quot;</span><span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CMakeLists.txt</code> 文件添加</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">install</span><span class="token punctuation">(</span>DIRECTORY launch
        DESTINATION share/<span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> install/setup.bash
ros2 launch cpp_parameters cpp_parameters_launch.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="启动文件-launch" tabindex="-1"><a class="header-anchor" href="#启动文件-launch" aria-hidden="true">#</a> 启动文件 launch</h2><p>ROS2 中提供了 launch 模块用于实现节点的批量启动</p><p>参考：https://www.wolai.com/kachex/9Cd3RkqmuNMRxu9HVB2YRz</p><p>创建一个 <code>py_launch</code> 的包用于批量启动节点。并在新建的包 <code>py_launch</code> 的目录下，创建 <code>launch</code> 目录 在 ros</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ros2 pkg create py_launch --build-type ament_python <span class="token parameter variable">--dependencies</span> rclpy
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> py_launch/launch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>py_launch/launch</code> 目录下创建 launch 文件</p><p><strong>python 文件</strong>：<code>py_all_nodes.launch.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> launch <span class="token keyword">import</span> LaunchDescription
<span class="token keyword">from</span> launch_ros<span class="token punctuation">.</span>actions <span class="token keyword">import</span> Node
    video_reader <span class="token operator">=</span> Node<span class="token punctuation">(</span>package<span class="token operator">=</span><span class="token string">&quot;py_video&quot;</span><span class="token punctuation">,</span> executable<span class="token operator">=</span><span class="token string">&quot;video_reader&quot;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> LaunchDescription<span class="token punctuation">(</span><span class="token punctuation">[</span>video_reader<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#  可以添加多个节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>xml 文件：</strong><code>py_all_nodes.launch.xml</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>turtlesim<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exec</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>turtlesim_node<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>t1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>turtlesim<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exec</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>turtlesim_node<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>t2<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>yaml 文件：</strong><code>py_all_nodes.launch.yaml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">launch</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">node</span><span class="token punctuation">:</span>
    <span class="token key atrule">pkg</span><span class="token punctuation">:</span> <span class="token string">&quot;turtlesim&quot;</span>
    <span class="token key atrule">exec</span><span class="token punctuation">:</span> <span class="token string">&quot;turtlesim_node&quot;</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;t1&quot;</span>
<span class="token punctuation">-</span> <span class="token key atrule">node</span><span class="token punctuation">:</span>
    <span class="token key atrule">pkg</span><span class="token punctuation">:</span> <span class="token string">&quot;turtlesim&quot;</span>
    <span class="token key atrule">exec</span><span class="token punctuation">:</span> <span class="token string">&quot;turtlesim_node&quot;</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;t2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建、运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>colcon build
<span class="token builtin class-name">.</span> install/setup.bash
ros2 launch py_launch py_all_nodes.launch.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,106);function M(U,j){const a=c("ExternalLinkIcon");return o(),l("div",null,[v,n("p",null,[s("下载 "),n("a",m,[s("ROS2"),e(a)])]),b,n("p",null,[n("a",g,[s("官方 ROS 镜像"),e(a)]),s("，这里推荐使用 "),n("a",h,[s("OSRF Docker Images"),e(a)]),s("，已经写好了一个 "),_]),f,n("p",null,[s("Jetson Nano 安装 ROS2 只能通过 docker 安装，参考项目 "),n("a",y,[x,e(a)])]),w,n("p",null,[s("安装时参考 "),n("a",q,[s("ROS2 版本支持"),e(a)]),s("，具体镜像在 "),n("a",R,[S,e(a)]),s("，修改 "),C,s(" 中 "),O,s(" 或者在运行时指定")]),T,n("p",null,[s("安装 "),n("a",N,[s("ROS"),e(a)]),s("，调出命令 "),E]),A,P,n("p",null,[n("a",I,[s("ROS2 中文网"),e(a)])]),D,i(" http://dev.ros2.fishros.com/doc/Tutorials/Writing-A-Simple-Py-Publisher-And-Subscriber.html "),L])}const $=p(k,[["render",M],["__file","index.html.vue"]]);export{$ as default};
